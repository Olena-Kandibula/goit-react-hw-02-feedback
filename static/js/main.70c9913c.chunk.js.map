{"version":3,"sources":["components/statistics/Statistics.module.css","components/section/Section.js","components/feedbackOptions/FeedbackOptions.js","components/statistics/TotalSmile.js","components/statistics/Statistics.js","components/statistics/notification/Notification.js","App.js","reportWebVitals.js","index.js","components/feedbackOptions/FeedbackOptions.module.css"],"names":["module","exports","Section","title","children","FeedbackOptions","options","onLeaveFeedback","className","s","container","Object","keys","map","option","type","name","button","onClick","TotalSmile","total","smile","items","Array","from","length","u","i","item","Statistics","good","neutral","bad","positivePercentage","list","description","Notification","message","App","state","event","dataEvent","target","setState","prevState","countTotalFeedback","values","reduce","acc","value","countPositiveFeedbackPercentage","positiveFeedbackPercentage","Math","ceil","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70c9913c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3CfhR\",\"item\":\"Statistics_item__2l2Ra\",\"description\":\"Statistics_description__2TEvX\"};","import PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h2> {title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import s from '../feedbackOptions/FeedbackOptions.module.css';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div className={s.container}>\n      {Object.keys(options).map(option => (\n        <button\n          key={option}\n          type=\"button\"\n          name={option}\n          className={s.button}\n          onClick={onLeaveFeedback}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.object.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\n\nfunction TotalSmile({ total, smile }) {\n  const items = Array.from({ length: total - 1 }).map((u, i) => i);\n\n  return (\n    <div>\n      {items.map(item => (\n        <span key={item}>{smile}</span>\n      ))}\n    </div>\n  );\n}\n\nTotalSmile.propTypes = {\n  total: PropTypes.number.isRequired,\n  smile: PropTypes.string,\n};\n\nexport default TotalSmile;\n","import s from '../statistics/Statistics.module.css';\nimport PropTypes from 'prop-types';\nimport TotalSmile from './TotalSmile';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div className={s.list}>\n      <p className={s.item}>\n        <span className={s.description}>Good:</span>\n        <span>{good}</span>\n        <span>&#9989;</span>\n      </p>\n      <p className={s.item}>\n        <span className={s.description}>Neutral:</span>\n        <span>{neutral}</span>\n        <span>&#128528;</span>\n      </p>\n      <p className={s.item}>\n        <span className={s.description}>Bad:</span>\n        <span>{bad}</span>\n        <span>&#9940;</span>\n      </p>\n      <p className={s.item}>\n        <span className={s.description}>Total:</span>\n        <span>{total}</span>\n        <span>&#9749;</span>\n      </p>\n\n      <TotalSmile total={total} smile=\"&#9749;\"></TotalSmile>\n\n      <p className={s.item}>\n        <span>Positive feedback:</span>\n        <span>{positivePercentage} %</span>\n      </p>\n    </div>\n  );\n};\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import './App.css';\n// import React from \"react\";\nimport React, { Component } from 'react';\n\nimport Section from './components/section/Section';\nimport FeedbackOptions from './components/feedbackOptions/FeedbackOptions';\nimport Statistics from './components/statistics/Statistics';\nimport Notification from './components/statistics/notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = event => {\n    const dataEvent = event.target.name;\n\n    this.setState(prevState => {\n      return {\n        [dataEvent]: prevState[dataEvent] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    const total = Object.values(this.state).reduce(\n      (acc, value) => acc + value,\n      0,\n    );\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const positiveFeedbackPercentage =\n      (this.state.good * 100) / this.countTotalFeedback();\n    return Math.ceil(positiveFeedbackPercentage);\n  };\n\n  render() {\n    const total = this.countTotalFeedback();\n\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.onLeaveFeedback}\n          ></FeedbackOptions>\n        </Section>\n\n        {total === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={total}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            ></Statistics>\n          </Section>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FeedbackOptions_container__2tPZL\",\"button\":\"FeedbackOptions_button__1VbJ6\"};"],"sourceRoot":""}