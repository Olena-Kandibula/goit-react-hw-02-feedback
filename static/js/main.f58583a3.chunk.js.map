{"version":3,"sources":["components/section/Section.js","components/feedbackOptions/FeedbackOptions.js","components/statistics/capsCoffeeTotal/capsCoffeeTotal.js","components/statistics/Statistics.js","components/statistics/notification/Notification.js","App.js","reportWebVitals.js","index.js","components/statistics/Statistics.module.css","components/feedbackOptions/FeedbackOptions.module.css"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","className","s","container","map","option","type","name","button","onClick","CapsCoffeeTotal","total","capsCoffee","Array","from","length","u","i","cap","color","Math","random","toString","substring","toUpperCase","size","Statistics","good","neutral","bad","positivePercentage","list","item","description","itemCapsTotal","Notification","message","App","state","nameFeedback","setState","prevState","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","positiveFeedbackPercentage","ceil","keys","this","generateRandomColor","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.f58583a3.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h2> {title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import s from '../feedbackOptions/FeedbackOptions.module.css';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  // console.log(options)\n  return (\n    <div className={s.container}>\n      {options.map(option => (\n        <button\n          key={option}\n          type=\"button\"\n          name={option}\n          className={s.button}\n          onClick={()=>onLeaveFeedback(option)}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,  \n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from 'prop-types';\r\n\r\nimport { GiCoffeeCup } from 'react-icons/gi';\r\n\r\nconst CapsCoffeeTotal = ({ total }) => {\r\n  function generateRandomColor() {\r\n    let color =\r\n      '#' +\r\n      (Math.random().toString(16) + '000000').substring(2, 8).toUpperCase();\r\n    return color;\r\n  }\r\n\r\n  const capsCoffee = Array.from({ length: total - 1 }).map((u, i) => i);\r\n\r\n  return (\r\n    <>\r\n      {capsCoffee.map(cap => (\r\n        <span key={cap}>\r\n          <GiCoffeeCup color={generateRandomColor()} size=\"30px\" />\r\n        </span>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nCapsCoffeeTotal.propTypes = {\r\n  total: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default CapsCoffeeTotal;\r\n","import PropTypes from 'prop-types';\nimport s from '../statistics/Statistics.module.css';\n\nimport CapsCoffeeTotal from './capsCoffeeTotal/capsCoffeeTotal';\n\nimport { GiCoffeeCup } from 'react-icons/gi';\nimport { FiCheckCircle } from 'react-icons/fi';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n      <ul className={s.list}>\n          \n      <li className={s.item}>\n        <span className={s.description}>Good:</span>\n        <span>{good}</span>\n        <span>\n          <FiCheckCircle color=\"green\" size=\"24px\" />\n        </span>\n      </li>\n\n      <li className={s.item}>\n        <span className={s.description}>Neutral:</span>\n        <span>{neutral}</span>\n        <span>\n          <FiCheckCircle color=\"grey\" size=\"24px\" />\n        </span>\n      </li>\n\n      <li className={s.item}>\n        <span className={s.description}>Bad:</span>\n        <span>{bad}</span>\n        <span>\n          <FiCheckCircle color=\"red\" size=\"24px\" />\n        </span>\n      </li>\n\n      <li className={s.item}>\n        <span className={s.description}>Total:</span>\n        <span>{total}</span>\n        <GiCoffeeCup color=\"green\" size=\"24px\" />\n      </li>\n\n      <li className={s.itemCapsTotal}>\n        <CapsCoffeeTotal total={total}></CapsCoffeeTotal>\n      </li>\n\n      <li className={s.item}>\n        <span>Positive feedback:</span>\n        <span>{positivePercentage} %</span>\n      </li>\n    </ul>\n  );\n};\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import './App.css';\nimport React, { Component } from 'react';\n\nimport Section from './components/section';\nimport FeedbackOptions from './components/feedbackOptions';\nimport Statistics from './components/statistics';\nimport Notification from './components/statistics/notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };  \n\n  onLeaveFeedback = nameFeedback => {\n   \n    // console.log (nameFeedback)\n    this.setState(prevState => ({\n      \n        [nameFeedback]: prevState[nameFeedback] + 1,\n      \n    }));    \n  };\n\n  countTotalFeedback = () => {\n    const total = Object.values(this.state).reduce(\n      (acc, value) => acc + value,\n      0,\n    );\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const positiveFeedbackPercentage =\n      (good * 100) / this.countTotalFeedback();\n    return Math.ceil(positiveFeedbackPercentage);\n  };\n\n  render() {\n    const options = Object.keys(this.state)\n    const total = this.countTotalFeedback();\n    const { good } = this.state;\n    const { neutral } = this.state;\n    const { bad } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          ></FeedbackOptions>\n        </Section>\n\n        {total === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n              generateRandomColor={this.generateRandomColor}\n            ></Statistics>\n          </Section>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__3CfhR\",\"item\":\"Statistics_item__2l2Ra\",\"description\":\"Statistics_description__2TEvX\",\"itemCapsTotal\":\"Statistics_itemCapsTotal__3lUx_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FeedbackOptions_container__2tPZL\",\"button\":\"FeedbackOptions_button__1VbJ6\"};"],"sourceRoot":""}